call plug#begin(stdpath('data').'/plugged')
Plug 'nvim-tree/nvim-web-devicons'
Plug 'akinsho/toggleterm.nvim'
Plug 'projekt0n/github-nvim-theme'
Plug 'overcache/NeoSolarized'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-lualine/lualine.nvim'
Plug 'nvim-tree/nvim-tree.lua'
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
call plug#end()

"colorscheme catppuccin " catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
"colorscheme catppuccin-latte
"colorscheme tokyonight-day
"colorscheme tokyonight-storm
"colorscheme NeoSolarized
"colorscheme github_dark_default
syntax on
filetype plugin indent on "vim could find out what type of file editing

set nu
set clipboard=unnamedplus
set mouse=a
set scrolloff=10
set termguicolors
set autoindent
set smartindent
set history=50 "keep 50 commands in the history
"set ruler "display the cursor position in the lower right corner of hte Vim
set showcmd "display the incomplete command int the status line
set ignorecase "search
set tabstop=2
set smarttab
set expandtab
set softtabstop=2
set shiftwidth=4
set nobackup
set noswapfile
set autoread
set cursorline
set encoding=utf-8
"set rnu
"set nornu

let mapleader='\'

"" telescope
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

"nvim-tree
nnoremap <leader>tt <cmd>NvimTreeToggle<cr>
nnoremap <leader>tf <cmd>NvimTreeFindFile<cr>

nnoremap <leader>cmd <cmd>ToggleTerm direction=float<cr>

"cpp compile
"nnoremap <leader>go <cmd>w<cr> <cmd>TermExec cmd='g++ -o %:r % -Wall -std=c++23 && ./%:r' direction=float <cr>
"nnoremap <leader>goo <cmd>w<cr> <cmd>TermExec cmd='g++ -o %:r % -Wall -std=c++23 && ./%:r <in' direction=float <cr>

lua << EOF

vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1


-- 创建自动命令组，用于管理不同语言的快捷键映射
vim.api.nvim_create_augroup("MultiLangAutoRun", { clear = true })

-- 定义每种语言对应的命令（支持任意数量的命令）
local language_commands = {
  python = {
    go  = [[python3 %]],
    goo = [[python3 % <in]]
  },
  cpp = {
    go  = [[g++-14 -o %:r % -Wall -Wextra -march=native -std=c++23 && ./%:r]],
    goo = [[g++-14 -o %:r % -Wall -Wextra -march=native -std=c++23 && ./%:r < in]]
  },
  go = {
    go  = [[go run %]],
    goo = [[go test %]]
  }
}

-- 为每种语言创建自动命令，绑定快捷键
for filetype, cmds in pairs(language_commands) do
  vim.api.nvim_create_autocmd("FileType", {
    group = "MultiLangAutoRun",
    pattern = { filetype },
    callback = function()
      -- 遍历 cmds 表中的所有命令（如 go、goo）
      for cmd_name, cmd in pairs(cmds) do
        -- 绑定快捷键 <leader>cmd_name
        vim.keymap.set("n", "<leader>" .. cmd_name, function()
          -- 保存当前文件
          vim.cmd("w")
          -- 使用 TermExec 在浮动终端中执行命令
          vim.cmd("TermExec cmd='" .. cmd .. "' direction=float")
        end, {
          buffer = true,
          noremap = true,
          silent = true
        })
      end
    end
  })
end


require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'tokyonight',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    globalstatus = false,
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff', 'diagnostics'},
    lualine_c = {'filename'},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  winbar = {},
  inactive_winbar = {},
  extensions = {}
}

require("nvim-tree").setup({
  sort_by = "case_sensitive",
  view = {
    width = 30,
  },
  renderer = {
    group_empty = true,
  },
  filters = {
    dotfiles = true,
  },
})

require'nvim-web-devicons'.setup {
 -- your personnal icons can go here (to override)
 -- you can specify color or cterm_color instead of specifying both of them
 -- DevIcon will be appended to `name`
 override = {
  zsh = {
    icon = "",
    color = "#428850",
    cterm_color = "65",
    name = "Zsh"
  }
 };
 -- globally enable different highlight colors per icon (default to true)
 -- if set to false all icons will have the default icon's color
 color_icons = true;
 -- globally enable default icons (default to false)
 -- will get overriden by `get_icons` option
 default = true;
 -- globally enable "strict" selection of icons - icon will be looked up in
 -- different tables, first by filename, and if not found by extension; this
 -- prevents cases when file doesn't have any extension but still gets some icon
 -- because its name happened to match some extension (default to false)
 strict = true;
 -- same as `override` but specifically for overrides by filename
 -- takes effect when `strict` is true
 override_by_filename = {
  [".gitignore"] = {
    icon = "",
    color = "#f1502f",
    name = "Gitignore"
  }
 };
 -- same as `override` but specifically for overrides by extension
 -- takes effect when `strict` is true
 override_by_extension = {
  ["log"] = {
    icon = "",
    color = "#81e043",
    name = "Log"
  }
 };
}

require("toggleterm").setup()


require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all" (the five listed parsers should always be installed)
  ensure_installed = { "c", "cpp", "lua", "vim", "vimdoc", "query", "cmake", "go", "json", "python", "bash" },

  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- Automatically install missing parsers when entering buffer
  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
  auto_install = true,

  -- List of parsers to ignore installing (for "all")
  --ignore_install = { "javascript" },

  ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
  -- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!

  highlight = {
    enable = true,

    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
    -- the name of the parser)
    -- list of language that will be disabled
    --disable = {"c"},
    -- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files
    disable = function(lang, buf)
        local max_filesize = 100 * 1024 -- 100 KB
        local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
        if ok and stats and stats.size > max_filesize then
            return true
        end
    end,

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },

  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "gnn",
      node_incremental = "grn",
      scope_incremental = "grc",
      node_decremental = "grm",
    },
  },

  -- 启用基于 Tree-sitter 的缩进
  indent = {
    enable = true,
  },
}



EOF
